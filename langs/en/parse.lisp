(match-fn $noun ((n ? article () flags is nil :article 1)
                 ($ * $adj descs is nil :adj 2)
                 (n 1 noun () nil nil is)
                 ($ ? $prep descs is nil :prep 3)))
(match-fn $adj ((n ? desc ((:verbal t)) descs is nil :adv 1)
                (n 1 desc ((:verbal nil)) nil nil is)))
(match-fn $prep ((n 1 preposition () flags is nil :prep 1)
                 ($ 1 $noun nil nil is)))
(match-fn $~ ((n 1 ~ () nil nil is)))
(match-fn $verse ((n 1 chapter () flags is nil :chapter 1)
                  (n 1 verse () nil nil is)))
(match-fn $thing ((or ($noun $adj $prep) nil nil is)))
(match-fn $thing-comma (($ 1 $thing nil nil is)
                        (n 1 comma)))
(match-fn $con-thing (($ * $thing-comma other is nil :before 3)
                      ($ ? $thing other is nil :just-before 2)
                      (n 1 conjunction ((:multi t)) nil nil is)
                      ($ 1 $thing other is nil :after 1)))
(match-fn $anything ((or ($thing $con-thing) nil nil is)))
(match-fn $period ((n 1 period () nil nil is)))
(match-fn $! ((n 1 exclamation-point () nil nil is)))
(match-fn $punct ((or ($period $!) nil nil is)))
(match-fn $prog- ((n 1 aux-verb ((:function :copula) (:tense :past)))
                  (n 1 verb ((:finite nil) (:participle t) (:tense :present)) nil nil is)
                  (! flags is :aspect :progressive 1)
                  (! flags is :tense :present 2)
                  (! flags is :finite t 3)
                  (! flags is :mood :indicative 4)
                  (! flags is :tense :past 5)))
(match-fn $prog0 ((n 1 aux-verb ((:function :copula) (:tense :present)))
                  (n 1 verb ((:finite nil) (:participle t) (:tense :present)) nil nil is)
                  (! flags is :aspect :progressive 1)
                  (! flags is :tense :present 2)
                  (! flags is :finite t 3)
                  (! flags is :mood :indicative 4)))
(match-fn $prog+ ((n 1 aux-verb ((:function :copula) (:tense :future)))
                  (n 1 verb ((:finite nil) (:participle t) (:tense :present)) nil nil is)
                  (! flags is :aspect :progressive 1)
                  (! flags is :tense :present 2)
                  (! flags is :finite t 3)
                  (! flags is :mood :indicative 4)
                  (! flags is :tense :future 5)))
(match-fn $fin-verb ((n 1 verb ((:finite t)) nil nil is)))
(match-fn $verb ((or ($prog- $prog0 $prog+ $fin-verb) nil nil is)))
(match-fn $trans (($ ? $prep descs is nil :prep 1)
                  (n ? desc ((:verbal t)) descs is nil :adv 4)
                  ($ 1 $anything other is nil :subject 3)
                  ($ 1 $verb nil nil is nil (verb ((:valency :transitive) (:mood :indicative))) 0)
                  ($ 1 $anything other is nil :object 2)))
(match-fn $impers (($ ? $prep descs is nil :prep 1)
                   (n ? desc ((:verbal t)) descs is nil :adv 3)
                   (n 1 impersonalizer () flags is nil :pronoun 4)
                   ($ 1 $verb nil nil is)
                   ($ 1 $anything other is nil :object 2)
                   (! flags is :valency :impersonal 5)))
(match-fn $ditrans (($ ? $prep descs is nil :prep 1)
                    (n ? desc ((:verbal t)) descs is nil :adv 5)
                    ($ 1 $anything other is nil :subject 4)
                    ($ 1 $verb nil nil is nil (verb ((:valency :ditransitive) (:mood :indicative))) 0)
                    ($ 1 $anything other is nil :indir-object 3)
                    ($ 1 $anything other is nil :object 2)))
(match-fn $intrans (($ ? $prep descs is nil :prep 1)
                    (n ? desc ((:verbal t)) descs is nil :adv 3)
                    ($ 1 $anything other is nil :subject 2)
                    ($ 1 $verb nil nil is nil (verb ((:valency :intransitive) (:mood :indicative))) 0)))
(match-fn $quote1 ((n 1 single-quote () flags is nil :quote 1)
                   (or ($sen $con-sen) nil nil is)
                   (n 1 single-quote)))
(match-fn $quote2 ((n 1 double-quote () flags is nil :quote 1)
                   (or ($sen $con-sen) nil nil is)
                   (n 1 double-quote)))
(match-fn $quote ((or ($quote1 $quote2) nil nil is)))
(match-fn $clause ((n 1 relative-pronoun () flags is nil :relative-pronoun 3)
                   ($ ? $anything other is nil :subject 2)
                   (n 1 verb () nil nil is)
                   ($ ? $anything other is nil :object 1))) ;PROBABLY NOT DONE
(match-fn $talk (($ ? $prep descs is nil :prep 1)
                 ($ 1 $anything other is nil :subject 3)
                 ($ 1 $verb nil nil is nil (verb ((:talk t))) 0)
                 (n ? comma)
                 (or ($quote $clause) other is nil :object 2)))
(match-fn $sen ((or ($trans $impers $ditrans $intrans $talk) nil nil is)))
(match-fn $sen-comma (($ 1 $sen nil nil is)
                      (n 1 comma)))
(match-fn $con-sen-0 ((or ($sen $sen-comma) other is nil :before 2)
                      (n 1 conjunction () nil nil is)
                      ($ 1 $sen other is nil :after 1)))
(match-fn $con-sen-1 ((or ($sen $con-sen-0) other is nil :before 2)
                      (n ? comma)
                      (n 1 conjunction ((:multi nil)) nil nil is)
                      (or ($sen $con-sen-0) other is nil :after 1)))
(match-fn $con-sen (($ * $sen-comma other is nil :before 3)
                    ($ ? $sen other is nil :just-before 2)
                    (n 1 conjunction ((:multi t)) nil nil is)
                    ($ 1 $sen other is nil :after 1)))
(match-fn $con-sen-2 ((or ($sen $con-sen $con-sen-0) other is nil :before 2)
                      (n ? comma)
                      (n 1 conjunction ((:multi nil)) nil nil is)
                      (or ($sen $con-sen $con-sen-0) other is nil :after 1)))
(match-fn $final-sen ((or ($sen $con-sen $con-sen-2 $con-sen-0) nil nil is)
                      ($ 1 $punct flags is nil :punct 1)))
