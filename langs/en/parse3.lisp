(defun adj-or-prep (s &key context)
  (or (n= s #!noun ((:prep . ~) ~))
      (n= s #!desc ((:verbal . nil) ~))
      (and (n= s #$conjunction)
           (adj-or-prep (cdr (assoc :after (flags s)))))))
(defun conj-match (th &key context)
  (let ((g (assoc :after (flags (car (last context))))))
    (when g
      (or (eq (ntype (cdr g)) (ntype th))
          (and (adj-or-prep (cdr g))
               (adj-or-prep th))))))
(defun conj-match-no-com (th &key context)
  (and (conj-match th :context context)
       (not (assoc :before (flags (car (last context)))))
       (not (assoc :just-before (flags (car (last context)))))))
(defun blank-conj (c &key context)
  (and (n= c #$conjunction)
       (not (assoc :after (flags c)))))
(defun th-or-con (th)
  (lambda (s &key context)
    (or (n= s th)
        (and (n= s #$conjunction)
             (n= (cdr (assoc :after (flags s))) th)))))
(defun aspect (aux part)
  (let ((r (copy-node part)))
    (setf (flags r) (remove-duplicates (append (flags aux) (flags r))
                                       :key #'car :from-end t))
    (if (and (eq (get-flag aux :function) :copula)
             (eq (get-flag part :tense) :present))
        (progn
          (push (append '(:aspect :progressive) (get-flag aux :aspect))
                (flags r))
          r)
      (if (and (eq (get-flag aux :function) :perfective)
               (eq (get-flag part :tense) :past))
          (progn
            (push (append '(:aspect :perfect) (get-flag aux :aspect)) (flags r))
            r)
        (list aux part)))))

(setf *pats*
      (list (list (list #$article #$noun) (bind :article) nil)
            (list (list #$preposition #$noun) (bind :prep) nil)
            (list (list #$noun #!noun ((:prep . ~) ~)) #@'desc nil)
            (list (list #$aux-verb #!verb ((:finite) (:participle . t) ~))
                  #'aspect nil)
            (list (list #$chapter #$verse) #@(bind :ch) nil)
            (list (list #'conj-match-no-com #$conjunction)
                  (bind :just-before) nil)
            (list (list #'adj-or-prep #$noun) #'desc t)
            (list (list #'blank-conj ~) #@(bind :after) t)
            (list (list #'conj-match #$comma)
                  (push-bind :before) t)
            (list (list (th-or-con #$noun) #!verb ((:mood . :indicative) ~))
                  (bind :subject) t)
            (list (list #!verb ((:mood . :indicative) (:subject . ~)
                                (:valency . :transitive) ~)
                        (th-or-con #$noun))
                  #@(bind :object) t)
            (list (list #!noun ((:prep . ~) ~)
                        #!verb ((:mood . :indicative) ~))
                  #'desc t)
            (list (list #!verb ((:mood . :indicative) ~)
                        #!noun ((:prep . ~) ~))
                  #@'desc t)
            (list (list (th-or-con #!verb ((:mood . :indicative) (:subject . ~)
                                           (:valency . :transitive) ~))
                        #$period)
                  #@(bind :punct) t)
            (list (list #$verb #!desc ((:verbal . t) ~)) #@'desc t)
            (list (list #!desc ((:verbal . t) ~) #$verb) #'desc t)
            ))
